git 명령어 정리

git rebase
브랜치 분기 시점(base)을 새롭게 정의할 때 이용

> git chekcout 브랜치
> git rebase master

커밋 메시지 수정
가장 최근 커미 내용 수정
> git commit --amend

더 오래된 커밋 내용 수정 or 여러 커밋 내용 수정
> git rebase -i HEAD~3 (위에서 세번째꺼 수정 원할때)
수정하고 싶은 커밋 앞의 pick -> reword 로 변경
차례로 창이 뜨고 수정후 변경 내용 확인

git commit 취소
git rebase HEAD^ (직전 commit 취소)

git difftool 이용
> git difftool -t tool_name

-y option: no-prompt

git 안에 git repository: submodule (https://git-scm.com/book/en/v2/Git-Tools-Submodules)
> git submodule add https://github.com/chaconinc/DbConnector

> git diff -cached (submodule directory 이름) : 디렉토리 아래의 파일 수정사항을 직접 추적하지 않고 디렉토리 통째로 특별한 커밋으로 취급

submodule이 포함된 프로젝트 git clone 또는 pull 할때 submodule 디렉토리가 비어있음
추가로 아래 명령어 해줘야함
> git submodule init     : 서브모듈 정보를 기반으로 로컬 환경선ㄹ정 파일이 준비
> git submodule update   : 서브모듈의 리모트 저장소에서 데이터를 가져옴

서브모듈 업데이트
> cd submodule_directory
> git submodule update --remote

로컬저장소 원격저장소 연결
1. github에 저장소 생성
2. 로컬저장소와 원격저장소 연결
> git remote add origin <github link>
3. git push origin --all

로컬디스크에 원격저장소 만들기
1. 원격저장소(bare-repository) 만들기
> git init --bare
2. 로컬저장소와 원격저장소 연결
> git remote add origin <원격저장소 경로>
> git remote -v
3. 로컬저장소 파일 원격저장소에 저장
> git push -u origin master

re-authenticate
> gh auth login
https://stackoverflow.com/questions/71173441/github-git-credential-erase-operation-not-supported

